install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=T)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
?parse
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
d1
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment <- update(this_moment, hours=12, minutes=58, seconds=00)
this_moment
?now
nyc <- now("America/New_York")
nyc
depart <- nyc+days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
?as.period
as.period(how_long)
stopwatch()
load("~/OneDrive/Coursera/Data Science/Getting and Cleaning Data/Week 4/.RData")
head(merged)
dim(merged)
View(merged)
?grep
june <- grep(".*Fiscal year end: June.*", merged$Special.Notes)
length(june)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
dim(sampleTimes)
head(sampleTimes)
length(sampleTImes)
length(sampleTimes)
sum(grepl("^2012.*", sampleTimes))
library(lubridate)
install.packages("lubridate")
library(lubridate)
?y
grepl("^2007.*",sampleTimes[1])
yr2012 <- sampleTimes[grep("^2012.*",sampleTimes)]
length(yr2012)
yr2012[1:3]
?wday
weekdays <- wday(yr2012,label=T)
weekdays[1:5]
mondays <- weekdays["Mon"]
len(mondays)
length(mondays)
mondays
table(weekdays)
install.packages("dplyr")
?dplyr
library(dplyr)
install.packages("assertthat")
library(dplyr)
?dplyr
library(swirl)
swirl()
install_course_zip("C:/Users/ryan.summe/OneDrive/Coursera/Data Science/R Programming/swirl_courses-master.zip",multi=TRUE)
swirl()
play
play()
nxt()
q()
install.packages(c("formatR", "highr", "jsonlite", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime"))
View(edu)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("lattice")
install.packages(c("jsonlite", "manipulate"))
library(lattice)
library(datasets)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(Ozone ~ Wind, data = airquality)
rm(list=ls())
xyplot(Ozone ~ Wind, data = airquality)
?transform
?FACTOR
?factor
?llines
?axis
?points
?text
?print.trellis
?trellis.par.set
library(ggplot2)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
airquality <- transform(airquality, Month = factor(Month)
)
qplot(Wind, Ozone, data = airquality, facets = .~Month)
?ggplot
g <- ggplot(movies, aes(votes,rating))
print(g)
?aes
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies) + stats_smooth("loess")
qplot(votes, rating, data=movies, panel=panel.loess)
?ggplot
install.packages('ggplot2','lattice')
library("lattice", lib.loc="C:/Users/ryan.summe/OneDrive/Coursera/Data Science/R/R-3.1.3/library")
install.packages('ggplot2')
install.packages('lattice')
install.packages(c("evaluate", "manipulate"))
rm(airquality, g)
adfasdfasdfasdfasdf
1818181
181818181*2
97575849302837576748^5
license()
'hello'
x <- 'wassup'
x[]
x[1]
x[][1]
rm(x)
?qunif
qunif(75)
qunif(.75)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x,p)
rownames(temp) <- c("X", "Prob")
temp
?sumproduct
??sumproduct
??sum product
?crossprod
crossprod(temp["X",],temp["Prob"])
crossprod(temp)
1*.1+2*.2+3*.3+4*.4
library(swirl)
rm(list=ls())
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
setwd("~/OneDrive/Coursera/Data Science/Kaggle/Face Recognition")
load('data.Rd')
d.test <- read.csv(test.file, stringsAsFactors=F)
data.dir <- '~/OneDrive/Coursera/Data Science/Kaggle/Face Recognition/'
test.file <- paste0(data.dir,'test.csv')
d.test <- read.csv(test.file, stringsAsFactors=F)
d.test$Image <- NULL
save(d.train, im.train, d.test, im.test, file="data.Rd")
?merge
p <- matrix(data=colMeans(d.train, na.rm=T), nrow=nrow(d.test), ncol=ncol(d.train), byrow=T)
colnames(p) <- names(d.train)
predictions <- data.frame(ImageId = 1:nrow(d.test), p)
head(predictions)
submission <- melt(predictions, id.vars="ImageId", variable.name="FeatureName",
value.name="Location")
library(reshape2)
submission <- melt(predictions, id.vars="ImageId", variable.name="FeatureName",
value.name="Location")
head(submission)
example.submission <- read.csv(paste0(data.dir, "IdLookupTable.csv"))
head(example.submission)
sub.col.names <- c("RowId", "Location")
example.submission$Location <- NULL
submission <- merge(example.submission, submission, all.x=T, sort=F)
submission <- submission[,sub.col.names]
write.csv(submission, file="submission_means.csv", quote=F, row.names=F)
head(submission)
rm(list=ls())
swirl()
33/36
deck
4*13
4/52
1*(1/51)*(1/50)*(1/49)*(1/48)
1*1/12*1/11*1/10*1/9
5
info()
1
(1/52)^4
0
12/52
3/51
2/51
.8*1.6/2
.64
mypdf
?integrate
integrate(mypdf, 0, 1.6)
(.5^2)/4
.5
sqrt(2)
(1-.985)*(.001)
.997*.001
1-.985*1-.001
1-.997 * 1-.001
1-.985 * 1-.001
1-.997*1-.001
(1-.001) * (1-.985)
(.997*.001)/((.997*.001) + (1-.997) * (1-.001))
(.997*.001)/(.997*.001 + .015*.999)
rm(list=ls())
getwd()j
getwd()
setwd('..')
getwd()
list.folders()
list.files()
ls()
dir()
dir(5)
setwd(dir(5))
setwd('5. Reproducible Research')
dir()
??unzip
setwd("Project 1")
dir()
x <- dir()
x
x <- x[1]
x
x <- x[[1]]
x
x <- unlist(x)
x
x[1]
x[1][1]
setwd('RepData_PeerAssessment1')
unzip(activity.zip)
unzip("activity.zip")
dir()
data <- read.csv("activity.csv")
head(data)
summary(data)
str(data)
unique(data$steps)
data <- read.csv("activity.csv", stringsAsFactor = F)
str(data)
?as.date
?as.Date
as.Date(data$date[1])
?month
?Month
?as.Factor
?as.factor
?aggregate
stepsByDay <- aggregate(data$steps, data$date, sum)
stepsByDay <- aggregate(data$steps, list = data$date, sum)
stepsByDay <- aggregate(data$steps, list(date = data$date), sum)
head(stepsByDay)
?hist
hist(stepsByDay)
hist(stepsByDay$x)
library(ggplot)
install.packages("ggplot")
library(ggplot2)
qplot(stepsByDay$x)
qplot(stepsByDay$x, binwidth=100)
qplot(stepsByDay$x, binwidth=1000)
qplot(stepsByDay$x, binwidth=2000)
qplot(stepsByDay$x, binwidth=2500)
qplot(stepsByDay$x, binwidth=2500, xlab="Daily Steps", ylab="Count")
?qplot
qplot(stepsByDay$x, binwidth=2500, xlab="Daily Steps", ylab="Count", stat="mean")
qplot(stepsByDay$x, binwidth=2500, xlab="Daily Steps", ylab="Count")
dailySteps <- aggregate(data$steps, list(date = data$date), sum)
library(ggplot2)
qplot(dailySteps$x, binwidth=2500, xlab="Daily Steps", ylab="Count")
dailyStepsMean <- mean(dailySteps)
?mean
dailyStepsMean <- mean(dailySteps, na.rm=T)
dailyStepsMean <- mean(dailySteps$x, na.rm=T)
dailyStepsMedian <- median(dailySteps$x, na.rm=T)
head(data)
?weekday
?weekdays
weekdays(data$date[1])
str(data)
data$date <- as.Date(data$date)
weekdays(data$date[1])
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekdays(data$date[1]) %in% weekdays
?sapply
?tapply
?sapply
dayCheck <- sapply(data$date, weekdays)
head(dayCheck)
dayType <- dayCheck %in% weekdays
head(dayType)
class(dayType)
dayType[TRUE] <- "Weekday"
dayType[FALSE] <- "Weekend"
data$dayType <- dayType
str(data)
rm(weekdays, dayCheck)
?qplot
class(data$dayType)
data$dayType <- as.factor(dayType)
rm(weekdays, dayCheck)
str(data)
unique(data$dayType)
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
dayCheck <- sapply(data$date, weekdays)
dayType <- dayCheck %in% weekdays
table(dayType)
dayType[dayType == TRUE] <- "Weekday"
table(dayType)
dayType[dayType == FALSE] <- "Weekend"
table(dayType)
rm(weekdays, dayCheck)
data$dayType <- as.factor(dayType)
str(data)
qplot(data$interval, data$steps, geom="l", facets=.~data$dayType)
qplot(data$interval, data$steps, geom="line", facets=.~data$dayType)
qplot(data$interval, data$steps, geom="line")
?is.na
length(is.na(data$steps))
summary(data$steps)
sum(is.na(data$steps))
unique(data$interval)
length(unique(data$interval))
length(unique(data$day))
?which
naRows <- which(data$steps == NA)
naRows <- which(is.na(data$steps))
mean(data[data$interval == 5,]$steps)
mean(data[data$interval == 5,]$steps, na.rm=T)
mean(data[data$interval == 5,data$steps], na.rm=T)
mean(data[data$interval == 5,steps], na.rm=T)
str(data)
head(data[data$interval == 5,])
mean(data[data$interval == 5,]$steps, na.rm=T)
mean(data[data$interval == 50,]$steps, na.rm=T)
numNA <- sum(is.na(data$steps))
naRows <- which(is.na(data$steps))
dataNoNA <- data
for (row in naRows){
dataNoNA[row,dataNoNA$steps] <- mean(data[data$interval == dataNoNA[row,interval]]$steps)
}
for (row in naRows){
dataNoNA[row,dataNoNA$steps] <- mean(data[data$interval == dataNoNA[row,dataNoNA$interval]]$steps,
na.rm = TRUE)
}
dataNoNA <- data
for (row in naRows){
print(dataNoNA[row, dataNoNA$interval])
dataNoNA[row,dataNoNA$steps] <- mean(data[data$interval == dataNoNA[row,dataNoNA$interval]]$steps,
na.rm = TRUE)
}
for (row in naRows){
print(row)
print(dataNoNA[row,]$interval)
dataNoNA[row,dataNoNA$steps] <- mean(data[data$interval == dataNoNA[row,dataNoNA$interval]]$steps,
na.rm = TRUE)
}
for (row in naRows){
print(row)
print(dataNoNA[row,]$interval)
dataNoNA[row,dataNoNA$steps] <- mean(data[data$interval == dataNoNA[row,]$interval,]$steps,
na.rm = TRUE)
}
any.na(data$interval)
?is.na
anyNA(data$interval)
mean(data[data$interval == 0,]$steps, na.rm=T)
for (row in naRows){
dataNoNA[row,dataNoNA$steps] <- mean(data[data$interval == dataNoNA[row,]$interval,]$steps,
na.rm = TRUE)
}
for (row in naRows){
interval <- dataNoNA[row,]$interval
print(interval)
dataNoNA[row,dataNoNA$steps] <- mean(data[data$interval == dataNoNA[row,]$interval,]$steps,
na.rm = TRUE)
}
for (row in naRows){
interval <- dataNoNA[row,]$interval
print(interval)
dataNoNA[row,dataNoNA$steps] <- mean(data[data$interval == interval,]$steps, na.rm = TRUE)
}
mean(data[data$interval == dataNoNA[row,]$interval,]$steps, na.rm = TRUE)
mean(data[data$interval == dataNoNA[0,]$interval,]$steps, na.rm = TRUE)
head(data[data$interval == 0,])
table(unique(data[data$interval == 0,]))
length(unique(data$days))
head(data)
length(unique(data$date))
mean(data[data$interval == dataNoNA[0,]$interval,]$steps, na.rm = TRUE)
dataNoNA[0,]$interval
?is.nan
?anynan
any(is.nan(data$steps))
any(is.nan(data$interval))
range(data$interval)
?mean
mean(data[data$interval == dataNoNA[0,]$interval,]$steps, na.rm = TRUE)
mean(data[data$interval == 0,]$steps, na.rm = TRUE)
dataNoNA[0,]$interval
for (row in naRows){
interval <- dataNoNA[row,]$interval
print(interval)
fill <- mean(data[data$interval == interval,]$steps, na.rm = TRUE)
dataNoNA[row,dataNoNA$steps] <- fill
}
for (row in naRows){
interval <- dataNoNA[row,]$interval
print(interval)
fill <- mean(data[data$interval == interval,]$steps, na.rm = TRUE)
print(fill)
dataNoNA[row,dataNoNA$steps] <- fill
}
dataNoNa[row,]
dataNoNA[row,]
dataNoNA[row,dataNoNA$steps]
dataNoNA[row,]$steps
for (row in naRows){
interval <- dataNoNA[row,]$interval
newVal <- mean(data[data$interval == interval,]$steps, na.rm = TRUE
dataNoNA[row,]$steps <- newVal
for (row in naRows){
interval <- dataNoNA[row,]$interval
newVal <- mean(data[data$interval == interval,]$steps, na.rm = TRUE)
dataNoNA[row,]$steps <- newVal
}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
head(dataNoNA)
dailyStepsNoNA <- aggregate(dataNoNA$steps, list(date = dataNoNA$date), sum)
qplot(dailyStepsNoNA, binwidth=2500, xlab="Daily Steps", ylab="Count")
qplot(dailyStepsNoNA$x, binwidth=2500, xlab="Daily Steps", ylab="Count")
<-
dailyStepsNoNAMean <- mean(dailyStepsNoNA$x)
dailyStepsNoNAMedian <- median(dailyStepsNoNA$x)
dailyStepsNoNAMean
dailyStepsMean
dailyStepsNoNAMedian
dailyStepsMedian
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
dayCheck <- sapply(dataNoNA$date, weekdays)
dayType <- dayCheck %in% weekdays
dayType[dayType == TRUE] <- "Weekday"
dayType[dayType == FALSE] <- "Weekend"
dataNoNA$dayType <- as.factor(dayType)
rm(weekdays, dayCheck)
head(dataNoNA)
avgDaily <- aggregate(dataNoNA$steps, list(Day = dataNoNA$dayType), mean)
avgDaily <- aggregate(dataNoNA$steps, list(Day = dataNoNA$dayType, Interval = dataNoNA$interval), mean)
head(avgDaily)
qplot(avgDaily$Interval, avgDaily$x)
qplot(avgDaily$Interval, avgDaily$x, color = avgDaily$Day)
qplot(avgDaily$Interval, avgDaily$x, facets = .~avgDaily$Day)
qplot(avgDaily$Interval, avgDaily$x, facets = .~Day)
?qplot
qplot(avgDaily$Interval, avgDaily$x)
qplot(avgDaily$Interval, avgDaily$x, facets=Day~.
)
str(dataNoNA)
str(avgDaily)
qplot(Interval, x, facets=Day~., data=avgDaily)
qplot(Interval, x, facets=Day~., data=avgDaily, geom="line")
qplot(Interval, x, facets=Day~., data=avgDaily, geom="line", ylab="Steps")
?is.weekday
qplot(Interval, x, facets=.~Day, data=avgDaily, geom="line", ylab="Steps")
avgDaily <- aggregate(dataNoNA$steps, list(Day = dataNoNA$dayType, Interval = dataNoNA$interval), mean)
qplot(Interval, x, facets=.~Day, data=avgDaily, geom="line", ylab="Steps")
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
dayCheck <- sapply(dataNoNA$date, weekdays)
dayType <- dayCheck %in% weekdays
dayType[dayType == TRUE] <- "Weekday"
dayType[dayType == FALSE] <- "Weekend"
dataNoNA$dayType <- as.factor(dayType)
rm(weekdays, dayCheck)
install.packages("knitr")
